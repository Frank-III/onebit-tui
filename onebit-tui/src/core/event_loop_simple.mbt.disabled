///| Simplified Event Loop to avoid compiler issues
///| This is a temporary implementation until the compiler bug is fixed

pub struct EventLoop {
  mut running : Bool
  mut renderer : @ffi.Renderer?
  mut root_component : BaseRenderable?
  mut frame_rate : Int
  mut last_render_time : Int64
}

pub enum Event {
  KeyPress(key : String, ctrl : Bool, alt : Bool, shift : Bool)
  MouseClick(x : Int, y : Int, button : Int)
  MouseMove(x : Int, y : Int)
  Resize(width : Int, height : Int)
  Timer(id : String)
} derive(Show)

pub fn EventLoop::new(frame_rate : Int) -> EventLoop {
  {
    running: false,
    renderer: None,
    root_component: None,
    frame_rate,
    last_render_time: 0L,
  }
}

pub fn EventLoop::set_renderer(self : EventLoop, renderer : @ffi.Renderer) -> Unit {
  self.renderer = Some(renderer)
  renderer.enable_mouse(true)
}

pub fn EventLoop::set_root(self : EventLoop, component : BaseRenderable) -> Unit {
  self.root_component = Some(component)
}

pub fn EventLoop::run(self : EventLoop) -> Unit {
  self.running = true
  
  while self.running {
    self.render_frame()
  }
}

pub fn EventLoop::stop(self : EventLoop) -> Unit {
  self.running = false
}

fn EventLoop::render_frame(self : EventLoop) -> Unit {
  match (self.renderer, self.root_component) {
    (Some(renderer), Some(root)) => {
      let buffer = renderer.get_next_buffer()
      
      // Convert to TerminalBuffer and render
      let term_buffer = buffer_to_terminal_buffer(buffer)
      render_component(root, term_buffer)
      
      renderer.render(false)
    }
    _ => ()
  }
}

fn render_component(component : BaseRenderable, buffer : TerminalBuffer) -> Unit {
  // Render this component
  match component.render_fn {
    Some(render) => render(component, buffer)
    None => ()
  }
  
  // Render children
  for child in component.children {
    render_component(child, buffer)
  }
}

// Temporary buffer conversion until we add proper implementation
fn buffer_to_terminal_buffer(buffer : @ffi.Buffer) -> TerminalBuffer {
  TerminalBuffer::new(buffer.width.to_int(), buffer.height.to_int())
}