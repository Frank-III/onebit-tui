///| Demo that actually uses the OneBit TUI package components

fn main() -> Unit {
  println("\n🚀 OneBit TUI Package Demo - Using Real Components\n")
  
  // Create a Box component
  let box = @core.Box::new(
    x=5, 
    y=2, 
    width=50, 
    height=10
  )
  
  // Create some styled text
  let title_style = @core.Style::new()
    .foreground(@core.Color::rgb(100, 200, 255))
    .bold(true)
  
  let content_style = @core.Style::new()
    .foreground(@core.Color::rgb(200, 200, 200))
  
  // Create a buffer to render into
  let mut buffer = @core.Buffer::new(60, 20)
  
  // Draw a box with title
  println("📦 Drawing Box Component:")
  println("─────────────────────")
  
  // Manually render the box for now (since we don't have the full render pipeline)
  // Top border
  print("\u001b[3;6H") // Move cursor to box position
  print("┌")
  for i = 0; i < box.width - 2; i = i + 1 {
    print("─")
  }
  println("┐")
  
  // Title row
  print("\u001b[4;6H│ ")
  print("\u001b[38;2;100;200;255m\u001b[1m") // Apply title style
  print("OneBit TUI Box Component")
  print("\u001b[0m") // Reset style
  let padding = box.width - 26
  for i = 0; i < padding; i = i + 1 {
    print(" ")
  }
  println("│")
  
  // Separator
  print("\u001b[5;6H├")
  for i = 0; i < box.width - 2; i = i + 1 {
    print("─")
  }
  println("┤")
  
  // Content rows
  let contents = [
    "• Built with MoonBit's type system",
    "• Reactive state management",
    "• Component-based architecture"
  ]
  
  for row = 0; row < contents.length(); row = row + 1 {
    print("\u001b[\{6 + row};6H│ ")
    print("\u001b[38;2;200;200;200m") // Content style
    print(contents[row])
    print("\u001b[0m")
    let text_len = contents[row].length()
    let padding = box.width - text_len - 3
    for i = 0; i < padding; i = i + 1 {
      print(" ")
    }
    println("│")
  }
  
  // Empty rows
  for row = contents.length(); row < box.height - 4; row = row + 1 {
    print("\u001b[\{6 + row};6H│")
    for i = 0; i < box.width - 2; i = i + 1 {
      print(" ")
    }
    println("│")
  }
  
  // Bottom border
  print("\u001b[\{2 + box.height};6H└")
  for i = 0; i < box.width - 2; i = i + 1 {
    print("─")
  }
  println("┘")
  
  // Show buffer info
  println("\n\n📊 Buffer System:")
  println("─────────────────")
  println("Buffer dimensions: \{buffer.width}x\{buffer.height}")
  println("Total cells: \{buffer.cells.length()}")
  
  // Show color system
  println("\n🎨 Color System:")
  println("─────────────────")
  let colors = [
    (@core.Color::rgb(255, 0, 0), "Red"),
    (@core.Color::rgb(0, 255, 0), "Green"), 
    (@core.Color::rgb(0, 0, 255), "Blue"),
    (@core.Color::rgb(255, 255, 0), "Yellow"),
    (@core.Color::rgb(255, 0, 255), "Magenta"),
    (@core.Color::rgb(0, 255, 255), "Cyan")
  ]
  
  for i = 0; i < colors.length(); i = i + 1 {
    let (color, name) = colors[i]
    let ansi = color.to_ansi_fg()
    print("\{ansi}██\u001b[0m \{name}  ")
  }
  println("")
  
  // Show gradient
  println("\nGradient:")
  for i = 0; i < 40; i = i + 1 {
    let t = i.to_double() / 40.0
    let r = (255.0 * t).to_int()
    let g = (255.0 * (1.0 - t)).to_int() 
    let b = 128
    let color = @core.Color::rgb(r, g, b)
    print(color.to_ansi_fg() + "█")
  }
  println("\u001b[0m")
  
  println("\n✅ This demo uses actual OneBit TUI package components!")
}